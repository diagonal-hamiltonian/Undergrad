# -*- coding: utf-8 -*-
"""HW2 - Linalg

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kqQGsION62iw3XSAxbgp68Llr6awfFdL
"""

import numpy as np 
import scipy.linalg as linalg
import matplotlib.pyplot as plt
import pandas as pd

"""# Data wrangling"""

files    = np.array(['Hours_worked_per_week', 'Employment_rate', 'Labour_mobility', 'Working_population'])
country = np.array(['Belgium','Greece','Lithuania','Portugal','Bulgaria','Spain','Luxembourg','Romania','Czechia','France','Hungary','Slovenia','Denmark','Croatia','Slovakia','Germany','Italy','Netherlands','Finland','Estonia','Cyprus','Austria','Sweden','Ireland','Latvia','Poland','Switzerland','Norway','Iceland'])
symbol  = np.array(['BE','EL','LT','PT','BG','ES','LU','RO','CZ','FR','HU','SI','DK','HR','SK','DE','IT','NL','FI','EE','CY','AT','SE','IE','LV','PL','CH','NO','IS'])

path = ''

# Load in the hours worked data and arrange in that order
data = np.loadtxt( path + files[0], dtype=(np.str))

indices = np.zeros(29, dtype = int)
for i,coun in enumerate(data[:,0]):
  indices[i] = np.where(country == coun)[0]
symbol  = symbol[indices]
country = country[indices]

# Load data into arrays for PCA analysis
A = np.zeros((4,29))

# Load in the input data
for i,fil in enumerate(files):
  data = np.loadtxt( path + fil, dtype=(np.str))

  # Arrange the data according to the 'country' list
  for j,name in enumerate(country):
    indice = np.where(data[:,0]==name)
    A[i,j] = data[indice,1]

"""# Plotting"""
#######################
#         Q2          #
#######################

figsize = (10,5)
y_labels = ['Hours worked per week\n(hours)', 'employment rates\n(%)','Labour mobility\n(000’s of workers working outside their country of citizenship by citizenship)', 'Working population\n(000’s of workers)']

for i in range(4):
    plt.figure(files[i],figsize=figsize)
    plt.bar(symbol,A[i])
    plt.xlabel('Country',  fontsize=10)
    plt.ylabel(y_labels[i],fontsize=10)
    plt.xticks(fontsize=10)
    plt.yticks(fontsize=10)
    plt.title(files[i],fontsize=10)
    plt.ylim((np.min(A[i,:])*.8,
               np.max(A[i,:] *1.1)))
    plt.show()

"""# PCA analysis"""

#######################
#         Q3          #
#######################


# Zero Mean A
for i,row in enumerate(A):
  A[i] = A[i] - row.mean()

#######################
#         Q4          #
#######################

# Normalising A
D = np.zeros((4,4))
for i in range(4):
  D[i,i]=1/np.linalg.norm(A[i])

#######################
#         Q5          #
#######################

# Corrolation matrix  
C = ( D@A ) @ ( (D@A).T )

#######################
#         Q6          #
#######################

# Performing the PCA

import scipy as sc
# Finding the Q1 matrix
vals1, Q1 = sc.linalg.eig( C )

# Projecting on the first two components
Q1_tilde = np.array([Q1[:,0], Q1[:,1]])
pca      = (Q1_tilde)@(D@A)

#######################
#         Q6          #
#######################

# Performing the PCA

import scipy as sc
# Finding the Q1 matrix
vals1, Q1 = sc.linalg.eig( C )

# Projecting on the first two components
Q1_tilde = np.array([Q1[:,0], Q1[:,1]])
pca      = (Q1_tilde)@(D@A)

# Plotting the 1st 2 Principle components
PC1, PC2 = pca[0], pca[1] 

fig, ax = plt.subplots(figsize = (20,20))
plt.scatter(PC1, PC2, c='r')
plt.xlabel('PC1',size = 30)
plt.ylabel('PC2',size = 30)
plt.xlim((-.7,.7))
plt.ylim((-.7,.7))

for i in range(29):
  plt.scatter(.2, .2, c='w', label = symbol[i]+'='+country[i])

for i, txt in enumerate(symbol):
    r=np.random.choice([-1,1])
    arrowprops=dict(arrowstyle='<-', color='blue', linewidth=1)
    ax.annotate(txt,
                xy=(PC1[i], PC2[i]), 
                xytext=(PC1[i]+.03, PC2[i]),
                rotation = 45, size = 10,
                arrowprops=arrowprops,)
plt.legend()
plt.show()
